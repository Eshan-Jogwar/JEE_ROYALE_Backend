// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Questions{
  id String @id @default(uuid())
  Subject String
  Chapter String
  Topic String
  Options String[]
  questionID String
  correct_option Int
  pastOccurance PastBattles[]
}

model PastBattles{
  pastBattleId String @id
  player UserTable @relation(fields: [pastBattleId], references: [id])
  subject String
  subtopic String
  number_of_questions Int
  total_time Int
  Position Int
  answers Int[]
  questions  Questions[]
}

model UserTable{
  id    String   @id   @default(uuid())
  name  String
  email String
  password String
  victories Int @default(0)
  games_played Int @default(0)
  average_score Int @default(0)
  average_time Int @default(0)
  highest_streak Int @default(0)
  rr Rank @default(ROOKIE)
  Battles PastBattles[]
}

model liveSessions{
  id String @id @default(uuid())
  sessionId String @default(uuid())
  people Int
  subject String
  topic String
}

model liveSessionsQuestions{
  id String @id @default(uuid())
  sessionId String
  question1 String
  question2 String
  question3 String
  question4 String
  question5 String
  question6 String
  question7 String
  question8 String
  question9 String
  question10 String
}

model liveQuestionsAnswerTable{
  id String @id @default(uuid())
  sessionId String
  curr_answers Int[]
}

enum Rank {
  ROOKIE
  BRONZE
  SILVER
  GOLD
  LEGEND
  CONQUEROR
  TOP_1000
  TOP_500
  TOP_200
  TOP_100
  AIR0
}

